const concat=(...b)=>c=>c.concat(...b),filter=b=>c=>c.filter(b),find=b=>c=>c.find(b),findIndex=b=>c=>c.findIndex(b),includes=(b,c)=>d=>d.includes(b,c),join=b=>c=>c.join(b),map=b=>c=>c.map(b),reduce=(b,c)=>d=>d.reduce(b,c),reduceRight=(b,c)=>d=>d.reduceRight(b,c),slice=(...b)=>c=>c.slice(...b),sort=b=>c=>[...c].sort(b),indexOf=b=>c=>c.indexOf(b),lastIndexOf=b=>c=>c.lastIndexOf(b),reverse=b=>[...b].reverse(),first=b=>[...b].shift(),last=b=>[...b].pop(),all=b=>c=>c.every(b),any=b=>c=>c.some(b),append=b=>c=>[...c,b],prepend=b=>c=>[...c].unshift(b),drop=b=>c=>c.slice(b),dropLast=b=>c=>c.slice(0,c.length-b),take=b=>c=>c.slice(0,b),takeLast=b=>c=>c.slice(c.length-b),flatten=b=>b.reduce((a,b)=>Array.isArray(b)?[...a,...flatten(b)]:[...a,b],[]),insert=b=>c=>d=>[...d.slice(0,b),c,...d.slice(b)],insertAll=b=>c=>d=>[...d.slice(0,b),...c,...d.slice(b)],update=b=>c=>d=>[...d.slice(0,b),c,...d.slice(b-1)],updateAll=b=>c=>d=>[...d.slice(0,b),...c,...d.slice(b-c.length)],hasMatchIn=c=>a=>[c,a].reduce((b,d,f)=>b?b:d.reduce((b,d)=>b?b:!f?a.includes(d):c.includes(d),!1),!1);module.exports={concat,filter,find,findIndex,includes,join,map,reduce,reduceRight,slice,sort,indexOf,lastIndexOf,reverse,first,last,all,any,append,prepend,drop,dropLast,take,takeLast,flatten,insert,insertAll,update,updateAll,hasMatchIn};